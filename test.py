import requests
import logging
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    filters
)
from yookassa import Configuration, Payment
import asyncio
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_KEY = "e1f2ef350da0032b567b66a7c36e509e"
BOT_TOKEN = "8197845963:AAGS9dWU2QNr4NIo_TfqWvmmkHXUuXT2QsE"
YKASSA_SHOP_ID = 1066265
YKASSA_SECRET_KEY = "test_ha5ciX5g5F5ECL6qqgEM9cd5PFvD8mPuXU-9ov3BwSc"
BALANCE_API_URL = 'https://balancesteam.ru/api/v2/partner/balance'
CHECK_API_URL = 'https://balancesteam.ru/api/v2/partner/check'
CREATE_ORDER_URL = 'https://balancesteam.ru/api/v2/partner/create'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YooKassa
Configuration.account_id = YKASSA_SHOP_ID
Configuration.secret_key = YKASSA_SECRET_KEY

# –≠—Ç–∞–ø—ã
CHOOSE_CURRENCY, GET_LOGIN, GET_AMOUNT, CONFIRMATION = range(4)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
def check_balance(apikey):
    response = requests.post(BALANCE_API_URL, data={'apikey': apikey})
    return response.json()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Steam –ª–æ–≥–∏–Ω–∞
def check_steam_login(apikey, steam_login):
    response = requests.post(CHECK_API_URL, data={'apikey': apikey, 'login_or_email': steam_login, 'service_id': 5955})
    return response.json()

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API balancesteam.ru
def create_order(apikey, steam_login, amount):
    response = requests.post(CREATE_ORDER_URL, data={
        'apikey': apikey,
        'login_or_email': steam_login,
        'service_id': 5955,
        'amount': amount
    })
    return response.json()

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ YooKassa
def create_payment_ykassa(amount, steam_login):
    commission = calculate_commission(amount)
    total = round(amount + commission, 2)

    payment_data = {
        'amount': {
            'value': total,
            'currency': 'RUB'
        },
        'capture_mode': 'AUTOMATIC',
        'payment_method': 'BANK_CARD',
        'description': f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Steam –¥–ª—è {steam_login}",
        'confirmation': {
            'type': 'redirect',
            'return_url': 'https://t.me/testolki_bot'  # –£–∫–∞–∂–∏—Ç–µ URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        }
    }

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API YooKassa
    payment = Payment.create(payment_data)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
    return payment.confirmation.confirmation_url, payment.id

# –ö–æ–º–∏—Å—Å–∏—è
def calculate_commission(amount):
    return round(amount * 0.08, 2)  # 8% –∫–æ–º–∏—Å—Å–∏—è

# /start
async def start(update: Update, context: CallbackContext):
    # –°–±—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    context.user_data.clear()

    if update.callback_query:
        user_name = update.callback_query.from_user.first_name
        text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –æ–ø—Ü–∏—é:"
        keyboard = [
            [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å Steam", callback_data='topup')],
        ]
        await update.callback_query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        user_name = update.effective_user.first_name
        text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –æ–ø—Ü–∏—é:"
        keyboard = [
            [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å Steam", callback_data='topup')],
        ]
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

# –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å Steam
async def topup_handler(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ RUB", callback_data='currency_rub')],
        [InlineKeyboardButton("üá∫üá∏ USD (–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", callback_data='currency_usd_disabled')],
    ]
    await update.callback_query.edit_message_text("üåç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSE_CURRENCY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª—é—Ç—ã
async def currency_chosen(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    if update.callback_query.data == 'currency_rub':
        context.user_data['currency'] = 'RUB'
        await update.callback_query.edit_message_text("üßæ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Steam –ª–æ–≥–∏–Ω:")
        return GET_LOGIN
    else:
        await update.callback_query.edit_message_text("‚ùå USD –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞
async def get_login(update: Update, context: CallbackContext):
    steam_login = update.message.text
    result = check_steam_login(API_KEY, steam_login)

    if not result.get("status"):
        await update.message.reply_text("üö´ –õ–æ–≥–∏–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return GET_LOGIN

    context.user_data['steam_login'] = steam_login

    keyboard = [
        [
            InlineKeyboardButton("100", callback_data='amount_100'),
            InlineKeyboardButton("200", callback_data='amount_200'),
            InlineKeyboardButton("500", callback_data='amount_500'),
        ],
        [
            InlineKeyboardButton("1000", callback_data='amount_1000'),
            InlineKeyboardButton("2000", callback_data='amount_2000'),
            InlineKeyboardButton("5000", callback_data='amount_5000'),
        ]
    ]
    await update.message.reply_text("üíµ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é (–Ω–µ –º–µ–Ω—å—à–µ 100‚ÇΩ):", reply_markup=InlineKeyboardMarkup(keyboard))
    return GET_AMOUNT

# –í–≤–æ–¥ —Å—É–º–º—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
async def amount_button_handler(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    amount = int(update.callback_query.data.replace("amount_", ""))
    context.user_data['amount'] = amount
    return await show_confirmation(update.callback_query.message, context)

# –í–≤–æ–¥ —Å—É–º–º—ã –≤—Ä—É—á–Ω—É—é
async def amount_text_handler(update: Update, context: CallbackContext):
    try:
        amount = float(update.message.text)
        if amount < 100:
            raise ValueError
    except ValueError:
        await update.message.reply_text("üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –æ—Ç 100‚ÇΩ.")
        return GET_AMOUNT

    context.user_data['amount'] = amount
    return await show_confirmation(update.message, context)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π
async def show_confirmation(target, context):
    amount = context.user_data['amount']
    login = context.user_data['steam_login']
    commission = calculate_commission(amount)
    total = round(amount + commission, 2)

    text = (
        f"üßæ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π:\n\n"
        f"üë§ –õ–æ–≥–∏–Ω: {login}\n"
        f"üí∞ –°—É–º–º–∞ –Ω–∞ Steam: {amount}‚ÇΩ\n"
        f"üßæ –ö–æ–º–∏—Å—Å–∏—è: {commission}‚ÇΩ\n"
        f"üí≥ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total}‚ÇΩ"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel')],
    ]
    await target.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRMATION

def transfer_to_steam(amount, login):
    response = requests.post(
        "https://balancesteam.ru/api/v2/partner/create",
        data={
            "apikey": API_KEY,
            "login_or_email": login,
            "service_id": 5955,
            "amount": amount
        }
    )
    data = response.json()
    if not data.get("error"):
        print(f"üü¢ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ID –∑–∞–∫–∞–∑–∞: {data.get('id')}")
        return True
    else:
        print(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {data.get('message')}")
        return False

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
async def check_payment_status(payment_id, amount, query, login):
    print("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞...")
    while True:
        try:
            updated_payment = Payment.find_one(payment_id)
            print(f"–ü–ª–∞—Ç–µ–∂ —Å ID {payment_id} –ø–æ–ª—É—á–µ–Ω. –°—Ç–∞—Ç—É—Å: {updated_payment.status}")
            
            if updated_payment.status == "succeeded":
                print("–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞.")
                # –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞, –ø–µ—Ä–µ–≤–æ–¥–∏–º –¥–µ–Ω—å–≥–∏ –Ω–∞ Steam
                result = transfer_to_steam(amount, login)  # –≠—Ç–æ –≤–∞—à –∫–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ Steam
                print(result)
                if result:
                    await query.edit_message_text(
                        f"üí∏ –î–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø–∏–ª–∏! üéâ –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å Steam. ‚è≥",
                    )
                else:
                    await query.edit_message_text(
                    "‚ö†Ô∏è –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ Steam.\n"
                    "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á—É—Ç—å –ø–æ–∑–∂–µ.\n\n"
                    "üí¨ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–º–æ—â–∏. üôè"
                )
                break

            elif updated_payment.status == "canceled":
                print("–û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                # –û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
                await query.edit_message_text(
                    f"‚ùå –û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üí°",
                )
                break
            else:
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∂–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                print("–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.")
                await asyncio.sleep(10)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await asyncio.sleep(10)  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ / –æ—Ç–º–µ–Ω–∞
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def confirmation_handler(update: Update, context: CallbackContext):
    await update.callback_query.answer()

    if update.callback_query.data == 'confirm':
        amount = context.user_data['amount']
        login = context.user_data['steam_login']
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        payment_url, payment_id = create_payment_ykassa(amount, login)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –≤ user_data –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        context.user_data['payment_id'] = payment_id

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        await update.callback_query.edit_message_text(f"üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{payment_url}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        asyncio.create_task(check_payment_status(payment_id, amount, update.callback_query, login))

    else:
        await update.callback_query.edit_message_text("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        await start(update, context)

    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.")
    await start(update, context)
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(topup_handler, pattern='^topup$')],
        states={
            CHOOSE_CURRENCY: [CallbackQueryHandler(currency_chosen)],
            GET_LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_login)],
            GET_AMOUNT: [
                CallbackQueryHandler(amount_button_handler, pattern='^amount_'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, amount_text_handler),
            ],
            CONFIRMATION: [CallbackQueryHandler(confirmation_handler, pattern='^(confirm|cancel)$')],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv)
    app.run_polling()

if __name__ == "__main__":
    main()
