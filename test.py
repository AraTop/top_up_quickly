import requests
import logging
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    filters
)
from yookassa import Configuration, Payment
import asyncio
from datetime import datetime
from dotenv import load_dotenv
import os
import asyncpg

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_KEY = os.getenv("API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
YKASSA_SHOP_ID = os.getenv("YKASSA_SHOP_ID")
YKASSA_SECRET_KEY = os.getenv("YKASSA_SECRET_KEY")

ADMINS = [5706003073,2125819462]
BALANCE_API_URL = 'https://balancesteam.ru/api/v2/partner/balance'
CHECK_API_URL = 'https://balancesteam.ru/api/v2/partner/check'
CREATE_ORDER_URL = 'https://balancesteam.ru/api/v2/partner/create'
COMMISSION_RUB = 0.137

async def connect_db():
    return await asyncpg.create_pool(DATABASE_URL)

async def log_steam_topup(telegram_id, username, steam_login, amount, commission):
    pool = await connect_db()

    async with pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO steam_topups (telegram_id, username, steam_login, amount, commission)
            VALUES ($1, $2, $3, $4, $5)
            """,
            telegram_id, username, steam_login, amount, commission
        )
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await pool.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YooKassa
Configuration.account_id = YKASSA_SHOP_ID
Configuration.secret_key = YKASSA_SECRET_KEY

# –≠—Ç–∞–ø—ã
CHOOSE_CURRENCY, GET_LOGIN, GET_AMOUNT, CONFIRMATION = range(4)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
def check_balance(apikey):
    response = requests.post(BALANCE_API_URL, data={'apikey': apikey})
    return response.json()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Steam –ª–æ–≥–∏–Ω–∞
def check_steam_login(apikey, steam_login, currency):
    if currency == 'RUB':
        service_id = 5955

    response = requests.post(CHECK_API_URL, data={'apikey': apikey, 'login_or_email': steam_login, 'service_id': service_id})
    return response.json()

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API balancesteam.ru
def create_order(apikey, steam_login, amount):
    response = requests.post(CREATE_ORDER_URL, data={
        'apikey': apikey,
        'login_or_email': steam_login,
        'service_id': 5955,
        'amount': amount
    })
    return response.json()

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ YooKassa
def create_payment_ykassa(amount, steam_login, currency):
    commission = calculate_commission(amount, currency)
    total = round(amount + commission, 2)

    payment_data = {
        'amount': {
            'value': total,
            'currency': 'RUB'
        },
        'capture_mode': 'AUTOMATIC',
        'payment_method': 'BANK_CARD',
        'description': f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Steam –¥–ª—è {steam_login}",
        'confirmation': {
            'type': 'redirect',
            'return_url': 'https://t.me/testolki_bot'  # –£–∫–∞–∂–∏—Ç–µ URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        }
    }

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API YooKassa
    payment = Payment.create(payment_data)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
    return payment.confirmation.confirmation_url, payment.id

# –ö–æ–º–∏—Å—Å–∏—è
def calculate_commission(amount, currency):
    if currency == 'RUB':    
        return round(amount * COMMISSION_RUB, 2)  # 13.7% –∫–æ–º–∏—Å—Å–∏—è

# /start
async def start(update: Update, context: CallbackContext):
    context.user_data.clear()

    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Steam –∏ –Ω–µ —Ç–æ–ª—å–∫–æ! üöÄ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."

    keyboard = [
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å Steam", callback_data='topup')],
        [InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='my_orders')],
    ]

    if user_id in ADMINS:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])

    if update.callback_query:
        await update.callback_query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def back_to_menu(update: Update, context: CallbackContext):
    context.user_data.clear()
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Steam –∏ –Ω–µ —Ç–æ–ª—å–∫–æ! üöÄ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."

    keyboard = [
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å Steam", callback_data='topup')],
        [InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='my_orders')],
    ]

    if user_id in ADMINS:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])

    await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard))

async def view_my_orders(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    try:
        conn = await asyncpg.connect(DATABASE_URL)
        rows = await conn.fetch("""
            SELECT steam_login, amount, commission, created_at
            FROM steam_topups
            WHERE telegram_id = $1
            ORDER BY created_at DESC
            LIMIT $2
        """, user_id, 15)
        await conn.close()

        if not rows:
            text = "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."
        else:
            header = "üì¶ –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n"
            text = header
            for row in rows:
                block = (
                    f"üë§ –õ–æ–≥–∏–Ω: <code>{row['steam_login']}</code>\n"
                    f"üí∏ –°—É–º–º–∞: {row['amount']:.2f}‚ÇΩ\n"
                    f"üí∞ –ö–æ–º–∏—Å—Å–∏—è: {row['commission']:.2f}‚ÇΩ\n"
                    f"üïí –í—Ä–µ–º—è: {row['created_at'].strftime('%Y-%m-%d %H:%M')}\n\n"
                )
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–º –ª–∏ –ª–∏–º–∏—Ç –≤ 4096 —Å–∏–º–≤–æ–ª–æ–≤
                if len(text) + len(block) > 4096:
                    break
                text += block

        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]]

        await update.callback_query.message.edit_text(
            text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await update.callback_query.message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")

async def admin_panel(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üßæ –ö–æ–º–∏—Å—Å–∏—è", callback_data='choose_fee_type')],
        [InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞", callback_data='check_balance')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')],
    ]

    await query.edit_message_text(
        "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_check_balance(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    try:
        # –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞
        response = requests.post(BALANCE_API_URL, data={'apikey': API_KEY})
        data = response.json()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if "balance" in data:
            balance = float(data["balance"])
            text = f"üíº –ë–∞–ª–∞–Ω—Å –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞:\n\n{balance:.2f} ‚ÇΩ"
        else:
            text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n–ü—Ä–æ–≤–µ—Ä—å API."

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_panel')],
        ]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∞–ª–∞–Ω—Å–∞:\n{e}")

async def choose_fee_type(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üí∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∏—Å—Å–∏—é Steam (RUB)", callback_data='show_fee_rub')],
        [InlineKeyboardButton("üá∑üá∫ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é Steam (RUB)", callback_data='edit_fee_rub')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_panel')],
    ]

    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –¥–ª—è —á–µ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

#  –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é
async def show_fee_rub(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='choose_fee_type')],
    ]
    await query.edit_message_text(
         f"üíº –∫–æ–º–∏—Å—Å–∏—è –Ω–∞ Steam (RUB):\n\n{round(COMMISSION_RUB * 100, 2)}%",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

#  –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é
async def edit_fee_rub(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='choose_fee_type')],
    ]
    context.user_data["awaiting_fee"] = "COMMISSION_RUB"
    await query.edit_message_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è Steam (RUB):\n"
        "‚Ä¢ 1.0 = 100%\n"
        "‚Ä¢ 0.01 = 1%\n\n",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_text(update: Update, context: CallbackContext):
    fee_type = context.user_data.get("awaiting_fee")
    login = context.user_data.get('awaiting_login')
    sum_on_steam = context.user_data.get('awaiting_sum_on_steam')
    print(fee_type)
    if fee_type in ("COMMISSION_RUB", ''):
        try:
            percent = float(update.message.text)
            if percent <= 0:
                raise ValueError("–ú–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –Ω—É–ª—é")

            global COMMISSION_RUB
            COMMISSION_RUB =  percent
            print(COMMISSION_RUB)
            context.user_data["awaiting_fee"] = None
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='choose_fee_type')],
            ]
            await update.message.reply_text(
                f"‚úÖ –ö–æ–º–∏—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {fee_type.upper()}:\n"
                f"‚Ä¢ –í–≤–µ–¥–µ–Ω–æ: {percent}\n"
                f"‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: {percent * 100}%",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.")

    elif login:
        steam_login = update.message.text
        currency = context.user_data.get('currency')
        result = check_steam_login(API_KEY, steam_login, currency)

        if not result.get("status"):
            await update.message.reply_text("üö´ –õ–æ–≥–∏–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        context.user_data['steam_login'] = steam_login
        if currency == 'RUB':

            context.user_data['awaiting_login'] = False
            context.user_data['awaiting_sum_on_steam'] = True
            await update.message.reply_text(
                "üíµ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n"
                "‚úÖ –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ 100‚ÇΩ.\n"
                "üìù –ù–∞–ø—Ä–∏–º–µ—Ä: 100‚ÇΩ, 200‚ÇΩ.",
                parse_mode='Markdown'
            )

    elif sum_on_steam:
        try:
            amount = int(update.message.text)
            if amount < 100:
                raise ValueError("–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è —Å—É–º–º–∞")

            context.user_data['amount'] = amount
            context.user_data['awaiting_sum_on_steam'] = False
            currency = context.user_data.get('currency')

            commission = calculate_commission(amount, currency)
            total = round(amount + commission, 2)
            context.user_data['commission'] = commission
            steam_login = context.user_data.get('steam_login')

            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm_payment')],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_payment')],
            ]
            await update.message.reply_text(
                f"üßæ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π:\n\n"
                f"üë§ –õ–æ–≥–∏–Ω: {steam_login}\n"
                f"üí∞ –°—É–º–º–∞ –Ω–∞ Steam: {amount}‚ÇΩ\n"
                f"üßæ –ö–æ–º–∏—Å—Å–∏—è: {commission}‚ÇΩ\n"
                f"üí≥ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total}‚ÇΩ\n"
                f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç—ë–∂:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–æ—Ç 100‚ÇΩ).")

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ –∫–Ω–æ–ø–∫–∏.")

# –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å Steam
async def topup_handler(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ RUB", callback_data='currency_rub')],
        [InlineKeyboardButton("üá∫üá∏ USD (–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", callback_data='currency_usd')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')],
    ]
    await update.callback_query.edit_message_text("üåç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª—é—Ç—ã
async def currency_chosen(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='topup_handler')],
    ]
    # –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç—É –∏–∑ callback_data
    currency = query.data.split('_')[1].upper()
    context.user_data['currency'] = currency

    if currency == 'RUB':
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ª–µ–¥—É—é—â—É—é –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é ‚Äî –≤–≤–æ–¥ –ª–æ–≥–∏–Ω–∞
        context.user_data['awaiting_login'] = True
        await query.edit_message_text("üßæ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –æ—Ç –≤–∞—à–µ–≥–æ Steam –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif currency == 'USD':
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='topup_handler')],
        ]
        await query.edit_message_text("üá∫üá∏ USD (–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ):", reply_markup=InlineKeyboardMarkup(keyboard))

def transfer_to_steam(amount, login):
    response = requests.post(
        "https://balancesteam.ru/api/v2/partner/create",
        data={
            "apikey": API_KEY,
            "login_or_email": login,
            "service_id": 5955,
            "amount": amount
        }
    )
    data = response.json()
    if not data.get("error"):
        print(f"üü¢ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ID –∑–∞–∫–∞–∑–∞: {data.get('id')}")
        return True
    else:
        print(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {data.get('message')}")
        return False

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
async def check_payment_status(payment_id, amount, query, recipient, commission):
    print("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞...")
    
    previous_message = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    while True:
        try:
            updated_payment = Payment.find_one(payment_id)
            print(f"–ü–ª–∞—Ç–µ–∂ —Å ID {payment_id} –ø–æ–ª—É—á–µ–Ω. –°—Ç–∞—Ç—É—Å: {updated_payment.status}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if updated_payment.status == "succeeded":
                print("–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞.")
                
                # –≠—Ç–æ Steam –ª–æ–≥–∏–Ω ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                result = transfer_to_steam(amount, recipient)

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

                username = query.from_user.username
                user_id = query.from_user.id

                await log_steam_topup(user_id, username, recipient, amount, commission)
                if result:
                    message = "üí∏ –î–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø–∏–ª–∏! üéâ –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å Steam. ‚è≥"
                    break
                else:
                    message = (
                        "‚ö†Ô∏è –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ Steam.\n"
                        "üí¨ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–º–æ—â–∏. üôè"
                    )
                if previous_message != message:
                    await query.edit_message_text(message)
                    previous_message = message
                break

            elif updated_payment.status == "canceled":
                print("–û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                message = "‚ùå –û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üí°"
                if previous_message != message:
                    await query.edit_message_text(message)
                    previous_message = message
                break
            else:
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∂–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                print("–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.")
                await asyncio.sleep(10)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await asyncio.sleep(10)  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ / –æ—Ç–º–µ–Ω–∞
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def confirmation_handler(update: Update, context: CallbackContext):
    await update.callback_query.answer()

    if update.callback_query.data == 'confirm_payment':
        amount = context.user_data['amount']
        login = context.user_data['steam_login']
        currency = context.user_data.get('currency')
        commission = context.user_data.get('commission')

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        payment_url, payment_id = create_payment_ykassa(amount, login, currency)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –≤ user_data –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        context.user_data['payment_id'] = payment_id

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        await update.callback_query.edit_message_text(f"üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{payment_url}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        asyncio.create_task(check_payment_status(payment_id, amount, update.callback_query, login, commission))

    else:
        await update.callback_query.edit_message_text("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        await start(update, context)

    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: CallbackContext):
    await update.callback_query.edit_message_text("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await start(update, context)
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(admin_panel, pattern="^admin_panel$"))
    app.add_handler(CallbackQueryHandler(choose_fee_type, pattern="^choose_fee_type$"))
    app.add_handler(CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$"))
    app.add_handler(CallbackQueryHandler(edit_fee_rub, pattern="^edit_fee_rub$"))
    app.add_handler(CallbackQueryHandler(show_fee_rub, pattern="^show_fee_rub$"))
    app.add_handler(CallbackQueryHandler(handle_check_balance, pattern="^check_balance$"))
    app.add_handler(CallbackQueryHandler(topup_handler, pattern="^topup$"))
    app.add_handler(CallbackQueryHandler(topup_handler, pattern="^topup_handler$"))
    app.add_handler(CallbackQueryHandler(currency_chosen, pattern="^currency_rub$"))
    app.add_handler(CallbackQueryHandler(confirmation_handler, pattern="^confirm_payment$"))
    app.add_handler(CallbackQueryHandler(currency_chosen, pattern="^currency_usd$"))
    app.add_handler(CallbackQueryHandler(cancel, pattern="^cancel_payment$"))
    app.add_handler(CallbackQueryHandler(view_my_orders, pattern="^my_orders$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.run_polling()

if __name__ == "__main__":
    main()
